Día 3

## OPERADORES CON BOOLEANOS ##

    Representan únicamente dos valores: true o false.

    Los tipos de valores verdaderos por defecto son: 
        1. Todos los números (positivos y negativos) a excepción del 0.
        2. Todas las srings y arrays, excepto los estrings vacíos (" ").
        3. El booleano "True"
    Los tipos de valores falsos por defecto son:
        1. 0
        2. 0n
        3. null
        4. undefined
        5. NaN
        6. El booleano false
        7. '', "", ``, strings vácios
    Este tipo de valores podemos utilizarlos en comparaciones lógicas para después.

# Estos son los operadores de asignación, nos ayudan a ahorrar código haciendo shorthands de las operaciones con asignación.
    dia1-10/día3/img/assignment_operators.png

# Estos son los operadores de comparación. Sirven para hacer conparaciones lógicas de valores. Estos comparadores devuelven Booleanos
    dia1-10/día3/img/comparison_operators.png

    (A mi siempre se me olvidaba la diferencia entre "==" y "===". La diferencia es que el "==" compara únicamente el valor, es décir, una equivalencia; mientras que "===" compara el valor y el tipo de dato, es decir, que sea idéntico.)

# Operadores lógicos 
    
    Los operadores lógicos también arrojan únicamente valores booleanos. Los operadores lógicos son los siguientes:
        1. && (ampersand) 
            Funciona como "and", es decir, si se cumple una condición y otra, entonces el resultado será true. De no cumplirse una de las dos condiciones el resultado será false.
        2. || (pipe)
            Funciona como "or", es decir, si se cunple una condición u otra el resultado será true. Solo tiene que haber una condición verdadera para que el resultado sea true.
        3. ! (negación)
            Funciona negando una la aseveración, es decir, si hay una condición verdadera la transformará en falsa. Ejemplo:
                let check = 4 > 3; //True (4 es mayor a 3)
                let noCheck = !(4 > 3); //False (Aunque 4 es mayor a 3, el operador "!" invierte esta condición, por lo que devuelve false)

# Operadores de incremento

    Funciona como una suma de 1 en uno cada vez que se utiliza dicho operador, se puede usar antes o después del valor o variable. 

        1. Pre-incremento: Primero se hace el aumento antes de que aparezca la variable, por lo que en el momento en que se declara la variable, ya ha aumentado en 1.
            let count = 0;
            console.log(++count); // 1
            console.log(count); // 1

        2. Post-incremento: Aquí se aumenta en uno después de que se haya declarado la variable, esto hace que al momento no se vea reflejado, pero la siguiente vez que sea llamada, su valor habrá aumentado.
            let conunt = 0;
            console.log(count++); // 
            console.log(count); // 1

# Operadores de decremento

    Funciona como una resta de 1 en uno cada vez que se utiliza dicho operador, se puede usar antes o después del valor o variable. 

        1. Pre-decremento: Lo mismo de arriba pero restando en 1.
            let count = 0;
            console.log(--count); // 1
            console.log(count); // 1

        2. Post-decremento: Exactamente lo mismo de arriba pero después de ser invocada.
            let conunt = 0;
            console.log(count--); // 
            console.log(count); // 1

# El fokin operador "TERNARIO"

    El operador ternario funciona de una manera relativamente sencilla, se llama así por que es el único operador en JS que funciona con tres operandos (tres, terna, ternario...). La sintaxis es la siguiente: 
        condición ? expresión1 : expresión2

    Esto se traduce a que si la condición es verdadera, se devuelve la expresión1, de ser falsa, se devuelve la expresión2. Esto se vuelve sumamente útil cuando queremos usar una estructura "if" pero simplificada.

        Ejemplo díagmos que estamos construyendo una app de comida con un sistema de membresías, si eres miembro se te da un precio especial, de no serlo, se te dará un precio público.

        let isMember = false;
        console.log("El precio por la comida será de " + (isMember ? "150.00MXN" : "230.00MXN"));

        Al no ser miembro, el output en consola sería El precio por la comida será de 230.00MXN.

## MÉTODOS WINDOW ##

# Método alert()

    El método alert() muestra una ventana emergente de alerta con un mensaje específico. La sintaxis es simple.

        alert(message);
        alert("Bienvenido a 30 días de JS Edición Diego");

# Método prompt()

    El método prompt() muestra una ventana emergente con un imput para que el usuario ingrese texto. Devuelve el texto como un string, de cerrar el cuadro de diálogo devuelve null. La sintaxis es la siguiente: 

        let diálogo = prompt("Texto 1","Texto alternativo");

# Método confirm()

    Muestra un cuadro de diálogo con un mensaje específico sobre lo que se quiere realizar, éste aparecerá con un botón de aceptar y cancelar. El cuadro se suele utilizar para pedir permiso de ejecutar algo. Utiliza una string como argumento que se muetra en el cuadro de diálogo. Devuelve un booleano como return.

        const acuerdo = confirm("¿Estás de acuerdo con la instalación?");
        console.log(acuerdo); // El resultado será true or false dependiendo si acepta o cancela.

## OBJETO TIEMPO (DATE) ##

    Los objetos de tiempo justamente son eso, un objeto que nos ayuda a manipular el tiempo con métodos de tipo get, adjunto el link a dicha tabla para tener un panorama completo. 

    dia1-10/día3/img/date_time_object.png

    A continuación están la forma de manejar dicho objeto. 

# Crear un objeto tiempo

    El objeto de tiempo se crea de la siguiente manera:

        const hoy = new Date();
        console.log(hoy); // Sat Jul 06 2024 00:26:33 GMT-0600 (hora estándar central)

# Para obtener un año completo

    Extraemos con el método get:

        const hoy = new Date();
        console.log(hoy.getFullYear()); // 2024

# Para obtener el mes

        const hoy = new Date();
        console.log(hoy.getMonth()); // 6, porque es julio. El formato ed del (1-12)

# Para obtener fecha

        const hoy = new Date();
        console.log(hoy.getDate()); // 6 Porque es el sexto día

# Para obtener horas

        const hoy = new Date();
        console.log(hoy.getHours()); // 0

# Para obtener minutos

        const hoy = new Date();
        console.log(hoy.getMinutes()); // 42 (Minutos)

# Para obtener segundos

        const hoy = new Date();
        console.log(hoy.getSeconds()); // 48 (Segundos) 

# Para obtener tiempo (Forma de tiempo Unix). 

    1. getTime()

        const hoy = new Date();
        console.log(hoy.getTime());// 1720247876965 La cantidad de milisegundos desde el 1 de enero de 1970 hasta el 06 de julio de 2024

    2. Date.now()

        const allSeconds = Date.now();
        console.log(allSeconds); // 1720248094371